//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ВКачествеКаталогаПоискаФичУказываюТестовыйКаталог(Парам01)","ВКачествеКаталогаПоискаФичУказываюТестовыйКаталог","Когда В качестве каталога поиска фич указываю тестовый каталог ""lib\Проверка чтения описания и родительских каталогов фич""");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЧитательФичВозвращаетМассивИзТрехЭлементов()","ЧитательФичВозвращаетМассивИзТрехЭлементов","Тогда Читатель фич возвращает массив из трех элементов");
	ДобавитьШагВМассивТестов(ВсеТесты,"ТипЗначенияКаждогоИзЭлементовСтруктура()","ТипЗначенияКаждогоИзЭлементовСтруктура","И Тип значения каждого из элементов структура");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	КаталогИнструментов = ПолучитьКаталогИнструментовНаСервере();
	
	ПолноеИмяФайлаОбработки = КаталогИнструментов + "sbFeatureReader.epf";

	АдресХранилища = "";
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("НачатьПомещениеФайлаЗавершение", ЭтотОбъект), АдресХранилища, ПолноеИмяФайлаОбработки, Ложь, Новый УникальныйИдентификатор); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКаталогИнструментовНаСервере()
	КаталогStackCommons = Константы.КаталогStackCommons.Получить();
	
	Возврат КаталогStackCommons;
КонецФункции

&НаКлиенте
Процедура НачатьПомещениеФайлаЗавершение(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если Результат Тогда
		ИмяВнешнейОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);

		ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяВнешнейОбработки + ".Форма.Форма",, ЭтаФорма);

		Контекст.Вставить("ФормаОбработки", ФормаОбработки);
	КонецЕсли;
	
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища);
КонецФункции

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда В качестве каталога поиска фич указываю тестовый каталог "lib\Проверка чтения описания и родительских каталогов фич"
//@ВКачествеКаталогаПоискаФичУказываюТестовыйКаталог(Парам01)
Процедура ВКачествеКаталогаПоискаФичУказываюТестовыйКаталог(Парам01) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	Контекст.ФормаОбработки.ПрочитатьОписаниеФичиИРодительскиеКаталоги(Парам01);
КонецПроцедуры

&НаКлиенте
//Тогда Читатель фич возвращает массив из трех элементов
//@ЧитательФичВозвращаетМассивИзТрехЭлементов()
Процедура ЧитательФичВозвращаетМассивИзТрехЭлементов() Экспорт
	Ванесса.ПроверитьРавенство(Контекст.ОписаниеФичИИхРодительскихКаталогов, 3);
КонецПроцедуры

&НаКлиенте
//И Тип значения каждого из элементов структура
//@ТипЗначенияКаждогоИзЭлементовСтруктура()
Процедура ТипЗначенияКаждогоИзЭлементовСтруктура() Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Сообщить("ОбработкаОповещения");
	Если ИмяСобытия = "ОписаниеФичИРодительскиеКаталогиПрочитаны" Тогда
		Сообщить("ИмяСобытия");
		Контекст.Вставить("ОписаниеФичИИхРодительскихКаталогов", Контекст.ФормаОбработки.ПолучитьОписаниеФичиИРодительскиеКаталоги());

		Ванесса.ПродолжитьВыполнениеШагов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	Контекст = Новый Структура;
	
	ПередНачаломСценария();
КонецПроцедуры

//окончание текста модуля