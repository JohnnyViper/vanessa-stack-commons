//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ЯВедуРазработкуВКонфигурацииСОтключенымРежимомИспользованияСинхронныхВызовов()","ЯВедуРазработкуВКонфигурацииСОтключенымРежимомИспользованияСинхронныхВызовов","Когда я веду разработку в конфигурации с отключеным режимом использования синхронных вызовов");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюФормуЧитателяФич()","ЯПодключаюФормуЧитателяФич","Когда я подключаю форму читателя фич");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВКонтекстеЕстьФормаЧитателяФич()","ВКонтекстеЕстьФормаЧитателяФич","Тогда в контексте есть форма читателя фич");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯВызываюПроцедуруФормыЧитателяФичДляЧтенияОписанияФичИРодительскихКаталоговИПередаюВНеёПутьКТестовомуКаталогу(Парам01)","ЯВызываюПроцедуруФормыЧитателяФичДляЧтенияОписанияФичИРодительскихКаталоговИПередаюВНеёПутьКТестовомуКаталогу","Когда я вызываю процедуру формы читателя фич для чтения описания фич и родительских каталогов и передаю в неё путь к тестовому каталогу");
	ДобавитьШагВМассивТестов(ВсеТесты,"РезультатЧтенияОписанияФичИРодительскихКаталоговРавенСодержаниюМакета()","РезультатЧтенияОписанияФичИРодительскихКаталоговРавенСодержаниюМакета","Тогда результат чтения описания фич и родительских каталогов равен содержанию макета");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда я веду разработку в конфигурации с отключеным режимом использования синхронных вызовов
//@ЯВедуРазработкуВКонфигурацииСОтключенымРежимомИспользованияСинхронныхВызовов()
Процедура ЯВедуРазработкуВКонфигурацииСОтключенымРежимомИспользованияСинхронныхВызовов() Экспорт
	ВКонфигурацииОтключенРежимИспользованияСинхронныхВызовов();
КонецПроцедуры

&НаСервере
Процедура ВКонфигурацииОтключенРежимИспользованияСинхронныхВызовов()
	ТекущееЗначение = Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент;
	ПроверяемоеЗначение = Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.НеИспользовать;
	
	Если Не ТекущееЗначение = ПроверяемоеЗначение Тогда
		ВызватьИсключение "В конфигурации не отключен режим использования синхроных вызовов";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//Когда я подключаю форму читателя фич
//@ЯПодключаюФормуЧитателяФич()
Процедура ЯПодключаюФормуЧитателяФич() Экспорт
	КаталогИнструментов = ПолучитьКаталогИнструментовНаСервере();
	
	Контекст.Вставить("КаталогИнструментов", КаталогИнструментов);
	
	ПолноеИмяФайлаОбработки = Контекст.КаталогИнструментов + "sbFeatureReader.epf";

	АдресХранилища = "";
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("НачатьПомещениеФайлаЗавершение", ЭтотОбъект), АдресХранилища, ПолноеИмяФайлаОбработки, Ложь, Новый УникальныйИдентификатор); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКаталогИнструментовНаСервере()
	КаталогStackCommons = Константы.КаталогStackCommons.Получить();
	
	Возврат КаталогStackCommons;
КонецФункции

&НаКлиенте
Процедура НачатьПомещениеФайлаЗавершение(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если Результат Тогда
		ИмяВнешнейОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);

		ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяВнешнейОбработки + ".Форма.Форма",, ЭтаФорма);

		Контекст.Вставить("ФормаЧитателяФич", ФормаОбработки);
	КонецЕсли;
	
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища);
КонецФункции

&НаКлиенте
//Тогда в контексте есть форма внешней обработки
//@ВКонтекстеЕстьФормаЧитателяФич()
Процедура ВКонтекстеЕстьФормаЧитателяФич() Экспорт
	ЕстьФормаЧитателяФич = Контекст.Свойство("ФормаЧитателяФич");
	
	Ванесса.ПроверитьИстину(ЕстьФормаЧитателяФич);
КонецПроцедуры

&НаКлиенте
//Когда я вызываю процедуру формы читателя фич для чтения описания фич и родительских каталогов и передаю в неё путь к тестовому каталогу "lib\Проверка чтения описания и родительских каталогов фич"
//@ВКонтекстеЕстьФормаЧитателяФич()
Процедура ЯВызываюПроцедуруФормыЧитателяФичДляЧтенияОписанияФичИРодительскихКаталоговИПередаюВНеёПутьКТестовомуКаталогу(Парам01) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ПолноеИмяФайла = Контекст.КаталогИнструментов + Парам01;
	
	Контекст.ФормаЧитателяФич.ПрочитатьОписаниеФичиИРодительскиеКаталоги(ПолноеИмяФайла, Истина, "ОписаниеФичиИРодительскиеКаталоги");
КонецПроцедуры

&НаКлиенте
//Когда я вызываю процедуру формы читателя фич для чтения описания фич и родительских каталогов и передаю в неё путь к тестовому каталогу "lib\Проверка чтения описания и родительских каталогов фич"
//@ВКонтекстеЕстьФормаЧитателяФич()
Процедура РезультатЧтенияОписанияФичИРодительскихКаталоговРавенСодержаниюМакета() Экспорт

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОписаниеФичиИРодительскиеКаталоги" Тогда
		Если ТипЗнч(Контекст) = Тип("Структура") Тогда
			Контекст.Вставить("РезультатЧтенияОписанияФичИРодительскихКаталогов", Параметр);
		КонецЕсли;

		Ванесса.ПродолжитьВыполнениеШагов();
	КонецЕсли;
КонецПроцедуры
