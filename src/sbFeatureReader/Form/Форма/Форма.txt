
&НаКлиенте
Процедура Команда1(Команда)
	//ПрочитатьОдинФайл("D:\xDD\Rep\vanessa-stack-commons\features\feature reader\Читатель фич умеет читать описание фич и их родительских каталогов.feature", Истина, "");
	//НайтиИПрочитатьФайлыВКаталогах("D:\xDD\Rep\vanessa-stack-commons\lib\Проверка чтения описания и родительских каталогов фич", Истина, "");
КонецПроцедуры

&НаКлиенте
Процедура НайтиИПрочитатьФайлыВКаталогах(КаталогФич, ИнвертироватьСтрокуРодительскихКаталогов, ИмяСобытия) Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КаталогПоиска", КаталогФич + "\");
	ДополнительныеПараметры.Вставить("ИнвертироватьСтрокуРодительскихКаталогов", ИнвертироватьСтрокуРодительскихКаталогов);
	ДополнительныеПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("НайтиИПрочитатьФайлыВКаталогахОбработкаОповещения", ЭтотОбъект, ДополнительныеПараметры), КаталогФич, "*.feature", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НайтиИПрочитатьФайлыВКаталогахОбработкаОповещения(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Объект.Фичи = Новый Структура;
	
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		ИмяПеременной = ПолучитьИмяПеременнойИзСтроки(НайденныйФайл.ИмяБезРасширения);
		
		Фича = СоздатьФичу(НайденныйФайл);
		
		ОпределитьРодительскиеКаталогиФичи(Фича, НайденныйФайл, ДополнительныеПараметры); 
		
		Объект.Фичи.Вставить(ИмяПеременной, Фича);
	КонецЦикла;
	
	ОпределитьАдресаНайденныхФайловВоВременномХранилище();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьАдресаНайденныхФайловВоВременномХранилище()      
	АдресаОпределены = Истина;
	
	Фичи = Объект.Фичи;
	Для Каждого Пара Из Фичи Цикл
		ИмяФичи = Пара.Ключ;
		СодержимоеФичи = Пара.Значение;
		
		Если СодержимоеФичи.АдресВоВременномХранилище = Неопределено Тогда
			АдресаОпределены = Ложь;
			
			Адрес = "";
			
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ОпределитьАдресаНайденныхФайловВоВременномХранилищеЗавершение", ЭтотОбъект, ИмяФичи), Адрес, СодержимоеФичи.ПолноеИмя, Ложь);

			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если АдресаОпределены Тогда
		ПрочитатьСодержимоеФич();
		УдалитьСлужебныеПары();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСлужебныеПары()
	Фичи = Объект.Фичи;
	Для Каждого Пара Из Фичи Цикл
		Пара.Значение.Удалить("АдресВоВременномХранилище");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСодержимоеФич()
	Фичи = Объект.Фичи;
	Для Каждого Пара Из Фичи Цикл
		ИмяФичи = Пара.Ключ;
		СодержимоеФичи = Пара.Значение;
		
		ПрочитатьОдинФайлНаСервере(СодержимоеФичи, СодержимоеФичи.АдресВоВременномХранилище);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьАдресаНайденныхФайловВоВременномХранилищеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ИскомоеИмяФичи) Экспорт
	Фичи = Объект.Фичи;
	Для Каждого Пара Из Фичи Цикл
		ИмяФичи = Пара.Ключ;
		СодержимоеФичи = Пара.Значение;

		Если ИмяФичи = ИскомоеИмяФичи Тогда
			Пара.Значение.АдресВоВременномХранилище = Адрес;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОпределитьАдресаНайденныхФайловВоВременномХранилище();
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОдинФайл(ИмяФайла, ИнвертироватьСтрокуРодительскихКаталогов, ИмяСобытия) Экспорт
	Файл = Новый Файл(ИмяФайла);
	
	НайденныеФайлы = Новый Массив;
	
	НайденныеФайлы.Добавить(Файл);
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("КаталогПоиска", ИмяФайла);
	ДополнительныеПараметры.Вставить("ИнвертироватьСтрокуРодительскихКаталогов", ИнвертироватьСтрокуРодительскихКаталогов);
	ДополнительныеПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	
	НайтиИПрочитатьФайлыВКаталогахОбработкаОповещения(НайденныеФайлы, ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОдинФайлНаСервере(Фича, Адрес)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	
	Фича.Вставить("Функционал");

КонецПроцедуры

&НаКлиенте
Функция СоздатьФичу(НайденныйФайл)
	Фича = Новый Структура;
	
	Фича.Вставить("Имя", НайденныйФайл.Имя);
	Фича.Вставить("ИмяБезРасширения", НайденныйФайл.ИмяБезРасширения);
	Фича.Вставить("ПолноеИмя", НайденныйФайл.ПолноеИмя);
	Фича.Вставить("Путь", НайденныйФайл.Путь);
	Фича.Вставить("Расширение", НайденныйФайл.Расширение);
	Фича.Вставить("АдресВоВременномХранилище", Неопределено);
	Фича.Вставить("Родитель", Неопределено);
	
	Возврат Фича;
КонецФункции

&НаКлиенте
Процедура ОпределитьРодительскиеКаталогиФичи(Фича, НайденныйФайл, ДополнительныеПараметры)
	РодительскиеКаталоги = ПолучитьРодительскиеКаталоги(НайденныйФайл, ДополнительныеПараметры);
	
	СоздатьРодительскиеКаталоги(Фича.Родитель, РодительскиеКаталоги);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРодительскиеКаталоги(НайденныйФайл, ДополнительныеПараметры)
	СтрокаРодительскихКаталогов = СтрЗаменить(НайденныйФайл.Путь, ДополнительныеПараметры.КаталогПоиска, "");

	Если ДополнительныеПараметры.ИнвертироватьСтрокуРодительскихКаталогов Тогда
		ИнвертироватьСтрокуРодительскихКаталогов(СтрокаРодительскихКаталогов);	
	КонецЕсли;

	Разделитель = "\";
	
	РодительскиеКаталоги = Новый Массив;
	
	Пока Не ПустаяСтрока(СтрокаРодительскихКаталогов) Цикл
		ПозицияРазделителя = СтрНайти(СтрокаРодительскихКаталогов, Разделитель);
		Если ПозицияРазделителя = 0 Тогда
			СтрокаРодительскихКаталогов = "";
		Иначе
			Родитель = Лев(СтрокаРодительскихКаталогов, ПозицияРазделителя - 1);
			
			РодительскиеКаталоги.Вставить(0, Родитель);
			
			СтрокаРодительскихКаталогов = Сред(СтрокаРодительскихКаталогов, ПозицияРазделителя + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РодительскиеКаталоги;
КонецФункции

&НаСервере
Процедура ИнвертироватьСтрокуРодительскихКаталогов(ИсходнаяСтрока)
	Каталоги = Новый ТаблицаЗначений;
	
	Каталоги.Колонки.Добавить("Порядок");
	Каталоги.Колонки.Добавить("Каталог");
	
	Разделитель = "\";
	
	Индекс = 1;
	
	Пока Не ПустаяСтрока(ИсходнаяСтрока) Цикл
		НоваяСтрока = Каталоги.Добавить();
		
		НоваяСтрока.Порядок = Индекс;
		НоваяСтрока.Каталог = Лев(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, Разделитель) - 1);
		
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, Разделитель) + 1);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;

	Каталоги.Сортировать("Порядок Убыв");
	
	Для Каждого Строка Из Каталоги Цикл
		ИсходнаяСтрока = ИсходнаяСтрока + Строка.Каталог + Разделитель;

	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРодительскиеКаталоги(Родитель, РодительскиеКаталоги)
	Если Не ЗначениеЗаполнено(РодительскиеКаталоги) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеРодителя = Новый Структура;
	
	ОписаниеРодителя.Вставить("Имя", РодительскиеКаталоги[0]);
	ОписаниеРодителя.Вставить("Родитель", Неопределено);

	Родитель = ОписаниеРодителя;
	
	РодительскиеКаталоги.Удалить(0);
	
	СоздатьРодительскиеКаталоги(Родитель.Родитель, РодительскиеКаталоги);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяПеременнойИзСтроки(Знач ИсходнаяСтрока)
	ПроверочнаяСтрока = ПолучитьПроверочнуюСтроку();
	
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	ИтоговаяСтрока = "";
	
	Пробел = " ";
	НижнееПодчеркивание = "_";
	
	КрайнийСимвол = Истина;
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	Для Счетчик = 1 По ДлинаСтроки Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, Счетчик, 1);
		
		Если Истина
			И ТекущийСимвол = Пробел
			И Не КрайнийСимвол = НижнееПодчеркивание
			Тогда
			
			ИтоговаяСтрока = ИтоговаяСтрока + "_";

		Иначе
			Если Найти(ПроверочнаяСтрока, ТекущийСимвол) > 0 Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол;

			КонецЕсли;
		КонецЕсли;
		
		КрайнийСимвол = Прав(ИтоговаяСтрока, 1);
	КонецЦикла;
	
	ПервыйСимвол = Лев(ИтоговаяСтрока, 1);
	Если Найти("0123456789", ПервыйСимвол) > 0 Тогда
		ИтоговаяСтрока = НижнееПодчеркивание + ИтоговаяСтрока;
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
КонецФункции

&НаСервере
Функция ПолучитьПроверочнуюСтроку()
	КириллицаЗаглавные = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	КириллицаСтрочные = НРег(КириллицаЗаглавные);
	
	ЛатиницаЗаглавные = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	ЛатиницаСтрочные = НРег(ЛатиницаЗаглавные);
	
	Цифры = "0123456789";
	
	ПроверочнаяСтрока = 
	КириллицаЗаглавные +
	КириллицаСтрочные +
	ЛатиницаЗаглавные +
	ЛатиницаСтрочные +
	Цифры;
	
	Возврат ПроверочнаяСтрока;
КонецФункции
