{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{1,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",1,0,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,0,1},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКоманда1",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,1,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаКоманда1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"
&НаКлиенте
Перем Ванесса;

&НаКлиенте
Перем КонтекстСохраняемый;

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура Команда1(Команда)
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Функция ПолучитьПутьКФайлОтносительноКаталогоFeatures(ИмяФайлаСРасширением)
	ПутьКФайлу = """";
	
	СостояниеVanessaBehavior = Ванесса.ПолучитьСостояниеVanessaBehavior();
	
	ПутьКТекущемуFeatureФайлу = СостояниеVanessaBehavior.ТекущаяФича.ПолныйПуть;
	
	ПутьКФайлу = Лев(ПутьКТекущемуFeatureФайлу, СтрНайти(ПутьКТекущемуFeatureФайлу, ""features"") - 1) + ИмяФайлаСРасширением;
	
	Возврат ПутьКФайлу;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура КонфигурацияЗапущенаВРежимеТестирования() Экспорт
	ПутьКОтчету = ПолучитьПутьКФайлОтносительноКаталогоFeatures(""ОтчетОСправочнике1.erf"");
	Если ПустаяСтрока(ПутьКОтчету) Тогда
		ВызватьИсключение ""Не удалось определить путь к отчету"";		
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""txt"");
	Если Не Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(""/out"""""" + ИмяВременногоФайла + """""" /Execute "" + ПутьКОтчету + """") Тогда
		ВызватьИсключение ""Не смог подключить TestClient!"";
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ""/out"""""" + ИмяВременногоФайла + """""" /Execute "" + ПутьКОтчету + """";
	Сообщение.Сообщить();	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалосьПодключитьсяККонфигурацииЗапущенойВРежимеТестирования() Экспорт
	ТестКлиент = Новый ТестируемоеПриложение();
	
	ВремяОкончанияОжидания = ТекущаяДата() + 60;
	Подключен = Ложь;
	ОписаниеОшибкиСоединения = """";
	
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			ТестКлиент.УстановитьСоединение();
			Подключен = Истина;
			
			КонтекстСохраняемый.Вставить(""ТестКлиент"", ТестКлиент);
			
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Если Не Подключен Тогда
		ТестКлиент = Неопределено;
		
		ВызватьИсключение ОписаниеОшибкиСоединения;
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура УдалитьВсеЭлементыСправочика()
	Выборка = Справочники.Справочник1.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ЭлементОбъект.Удалить();
		
	КонецЦикла;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура КоличествоЭлементовСправочникаВИфобазеРавно(ПроверяемоеКоличество, ТекстИсключения = """")
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Справочник1.Ссылка
	|ИЗ
	|	Справочник.Справочник1 КАК Справочник1"";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		КоличествоЭлементов = 0;
		
	Иначе
		КоличествоЭлементов = РезультатЗапроса.Выбрать().Количество();
		
	КонецЕсли;
	
	Если Не КоличествоЭлементов = ПроверяемоеКоличество Тогда
		ВызватьИсключение ТекстИсключения;		
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура ПроверитьНаличиеОбъектаКофигурации(ВидОбъекта, ИмяСправочника) 
	Если Метаданные[ВидОбъекта].Найти(ИмяСправочника) = Неопределено Тогда
		ВызватьИсключение ""в конфигурации нет такого справочника"";	
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ВернутьВОповещенииФормуВнешнейОбработки(НачальноеИмяФайла, ЭтоОбработка, ИмяФормы, ИмяСобытия) 
	Адрес = """";
	
	ПараметрыПолученияФормы = Новый Структура;
	
	ПараметрыПолученияФормы.Вставить(""ЭтоОбработка"", ЭтоОбработка);
	ПараметрыПолученияФормы.Вставить(""ИмяФормы"", ИмяФормы);
	ПараметрыПолученияФормы.Вставить(""ИмяСобытия"", ИмяСобытия);
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения(""НачатьПомещениеФайлаЗавершение"", ЭтотОбъект, ПараметрыПолученияФормы), Адрес, НачальноеИмяФайла, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПомещениеФайлаЗавершение(УдалосьПоместитьФайл, Адрес, ВыбранноеИмяФайла, ПараметрыПолученияФормы) Экспорт
	ФормаВнешнегоФайла = Неопределено;
	
	Если УдалосьПоместитьФайл Тогда
		ДанныеВнешнегоФайла = ПолучитьДанныеВнешнегоФайлаНаСервере(Адрес, ПараметрыПолученияФормы);

		ФормаВнешнегоФайла = ПолучитьФорму(ДанныеВнешнегоФайла.Вид + ""."" + ДанныеВнешнегоФайла.Имя + "".Форма."" + ПараметрыПолученияФормы.ИмяФормы + """");
	КонецЕсли;
	
	Оповестить(ПараметрыПолученияФормы.ИмяСобытия, ФормаВнешнегоФайла);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВнешнегоФайлаНаСервере(Адрес, ПараметрыПолученияФормы)
	ДанныеВнешнегоФайла = Новый Структура(""Имя, Вид"");
	
	Если ПараметрыПолученияФормы.ЭтоОбработка Тогда
		ДанныеВнешнегоФайла.Имя = ВнешниеОбработки.Подключить(Адрес,, Ложь);	     
		ДанныеВнешнегоФайла.Вид = ""ВнешняяОбработка"";	     
		
	Иначе
		ДанныеВнешнегоФайла.Имя = ВнешниеОтчеты.Подключить(Адрес,, Ложь);	
		ДанныеВнешнегоФайла.Вид = ""ВнешнийОтчет"";	     
		
	КонецЕсли;
	
	Возврат ДанныеВнешнегоФайла; 
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = ""РезультатПодключенияФормыВнешнейОбработки"" Тогда
		Если Параметр = Неопределено Тогда
			Возврат;
			
		Иначе
			ФормаВнешнейОбработки = Параметр;
			
		КонецЕсли;
		
		РезультатВызоваВнешнйФункции = ФормаВнешнейОбработки.ЭкспортнаяФункция();
		
		ФормаВнешнейОбработки.ЭкспортнаяПроцедура();
		
		
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

Функция ПолучитьИмяПеременнойИзСтроки(Знач ИсходнаяСтрока, ПроверочнаяСтрока)
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	ИтоговаяСтрока = """";
	
	Пробел = "" "";
	НижнееПодчеркивание = ""_"";
	
	КрайнийСимвол = Истина;
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	Для Счетчик = 1 По ДлинаСтроки Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, Счетчик, 1);
		
		Если Истина
			И ТекущийСимвол = Пробел
			И Не КрайнийСимвол = НижнееПодчеркивание
			Тогда
			
			ИтоговаяСтрока = ИтоговаяСтрока + ""_"";
			
		Иначе
			Если Найти(ПроверочнаяСтрока, ТекущийСимвол) > 0 Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол;
				
			КонецЕсли;
		КонецЕсли;
		
		КрайнийСимвол = Прав(ИтоговаяСтрока, 1);
	КонецЦикла;
	
	ПервыйСимвол = Лев(ИтоговаяСтрока, 1);
	Если Найти(""0123456789"", ПервыйСимвол) > 0 Тогда
		ИтоговаяСтрока = НижнееПодчеркивание + ИтоговаяСтрока;
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
КонецФункции

Функция ПолучитьПроверочнуюСтроку()
	КириллицаЗаглавные = ""АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"";
	КириллицаСтрочные = НРег(КириллицаЗаглавные);
	
	ЛатиницаЗаглавные = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
	ЛатиницаСтрочные = НРег(ЛатиницаЗаглавные);
	
	Цифры = ""0123456789"";
	
	ПроверочнаяСтрока = 
	КириллицаЗаглавные +
	КириллицаСтрочные +
	ЛатиницаЗаглавные +
	ЛатиницаСтрочные +
	Цифры;
	
	Возврат ПроверочнаяСтрока;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура ЕстьОбъектКонфигурацииСИменем(ИмяВидаОбъект, ИмяОбъекта, ТекстИсключения = """")
	ИскомыйОбъект = Метаданные[ИмяВидаОбъект].Найти(ИмяОбъекта);
	Если ИскомыйОбъект = Неопределено Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Функция ПолучитьТаблицуЗначенийИзМассиваСтруктур(Знач МассивСтруктур, ПервуюСтруктуруВЗаголовок = Ложь)
	НоваяТаблица = Новый ТаблицаЗначений;
	
	ПроверочнаяСтрока = ПолучитьПроверочнуюСтроку();
	
	ИменаИЗначения = Новый Структура;
	
	ПервыйЭлемент = Истина;
	Для Каждого СтруктараВМассиве Из МассивСтруктур Цикл
		Если ПервыйЭлемент Тогда
			ПервыйЭлемент = Ложь;

			Для Каждого Пара Из СтруктараВМассиве Цикл
				Если ПервуюСтруктуруВЗаголовок Тогда
					ИмяПоЗначению = ПолучитьИмяПеременнойИзСтроки(Пара.Значение, ПроверочнаяСтрока);
					
					Имя = ИмяПоЗначению;
					
					ИменаИЗначения.Вставить(ИмяПоЗначению, Пара.Ключ);
					
				Иначе
					Имя = Пара.Ключ;
					
					ИменаИЗначения.Вставить(Имя, Имя);
					
				КонецЕсли;

				НоваяТаблица.Колонки.Добавить(Имя);
			КонецЦикла;	
			
			Если ПервуюСтруктуруВЗаголовок Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьСтроку(НоваяТаблица, ИменаИЗначения, СтруктараВМассиве);
	КонецЦикла;

	Возврат НоваяТаблица;
КонецФункции

&НаСервере
Процедура ДобавитьСтроку(НоваяТаблица, ИменаИЗначения, СтруктараВМассиве)
	НоваяСтрока = НоваяТаблица.Добавить();

	Для Каждого Пара Из ИменаИЗначения Цикл
		НоваяСтрока[Пара.Ключ] = СтруктараВМассиве[Пара.Значение];
	КонецЦикла;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура утв_ЕстьСправочник(ПредставлениеСправочника, ИскатьПоСинониму = Ложь, ТекстИсключения = """")
	СправочникНайден = Ложь;
	
	СвойствоПоиска = ?(ИскатьПоСинониму, ""Синоним"", ""Имя"");
	
	Для Каждого МетаданныеСправочника Из Метаданные.Справочники Цикл
		Если МетаданныеСправочника[СвойствоПоиска] = ПредставлениеСправочника Тогда
			СправочникНайден = Истина;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СправочникНайден Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура утв_ВСправочникеЕстьГруппаСНаименованием(ПредставлениеСправочника, НаименованиеГруппы, ТекстИсключения = """")
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник."" + ПредставлениеСправочника + "" КАК Справочник
	|ГДЕ
	|	Справочник.ЭтоГруппа
	|	И Справочник.Наименование = &Наименование"";
	
	Запрос.УстановитьПараметр(""Наименование"", НаименованиеГруппы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура утв_КоличествоЭлементовВГруппеСправочникаРавно(Группа, ПредставлениеСправочника, ОжидаемоеКоличество, ТекстИсключения = """")
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Справочник.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник."" + ПредставлениеСправочника + "" КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка В ИЕРАРХИИ(&Группа)"";
	
	Запрос.УстановитьПараметр(""Группа"", Группа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение ""Результат запроса пуст"";
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НайденноеКоличество = ВыборкаДетальныеЗаписи.Ссылка;
	
	Если НайденноеКоличество <> ОжидаемоеКоличество Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Функция ПолучитьЭлементГруппуСправочника(ИмяСправочника, Код = """", Наименование = """", ИскатьГруппу = Ложь)
	ПредставлениеПоиска = """";
	
	Если Истина
		И ПустаяСтрока(Код)                      
		И ПустаяСтрока(Наименование)
		Тогда
		
		ВызватьИсключение ""Не заполнено ни одно свойство поиска"";
		
	ИначеЕсли Истина
		И ЗначениеЗаполнено(Код)
		И ЗначениеЗаполнено(Наименование)
		Тогда
		
		ПредставлениеПоиска = ""коду """""" + Код + """""" и наименованию """""" + Наименование + """""""";
		
	ИначеЕсли ЗначениеЗаполнено(Код) Тогда
		ПредставлениеПоиска = ""коду """""" + Код + """""""";
		
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		ПредставлениеПоиска = ""наименованию """""" + Наименование + """""""";
		
	КонецЕсли;
	
	ТекстИсключения = ""Не нашли #ГруппуИлиЭлемент справочника #ИмяСправочника по #ПредставлениеПоиска"";
	
	ТекстИсключения = СтрЗаменить(ТекстИсключения, ""#ГруппуИлиЭлемент"", ?(ИскатьГруппу, ""группу"", ""элемент""));
	ТекстИсключения = СтрЗаменить(ТекстИсключения, ""#ИмяСправочника"", ИмяСправочника);
	ТекстИсключения = СтрЗаменить(ТекстИсключения, ""#ПредставлениеПоиска"", ПредставлениеПоиска);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник."" + ИмяСправочника + "" КАК Справочник
	|ГДЕ
	|	Справочник.ЭтоГруппа = &ИскатьГруппу
	|	"" + ?(ПустаяСтрока(Код), """", ""И Справочник.Код = &Код"") + ""
	|	"" + ?(ПустаяСтрока(Наименование), """", ""И Справочник.Наименование = &Наименование"") + ""
	|"";
	
	Запрос.УстановитьПараметр(""ИскатьГруппу"", ИскатьГруппу);
	Запрос.УстановитьПараметр(""Код"", Код);
	Запрос.УстановитьПараметр(""Наименование"", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение ТекстИсключения;

	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();

	Возврат ВыборкаДетальныеЗаписи.Ссылка;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ЗагрузитьFixtureИзМакета(ИмяМакета)
	Ванесса.ЗапретитьВыполнениеШагов();
	
	НачальноеИмяФайла = ПолучитьПутьКФайлОтносительноКаталогоFeatures(""tools\Выгрузка и загрузка данных XML.epf"");
	
	Адрес = """";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения(""ЗагрузитьFixtureИзМакетаЗавершение"", ЭтотОбъект, ИмяМакета), Адрес, НачальноеИмяФайла, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьFixtureИзМакетаЗавершение(УдалосьПоместитьФайл, Адрес, ВыбранноеИмяФайла, ИмяМакета) Экспорт
	ЗагрузитьFixtureИзМакетаЗавершениеНаСервере(Адрес, ИмяМакета);
	
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьFixtureИзМакетаЗавершениеНаСервере(Адрес, ИмяМакета)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Текст = РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ВременныйДокумент = Новый ТекстовыйДокумент;
	ВременныйДокумент.УстановитьТекст(Текст);
	ВременныйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);

	ВнешняяОбработка.ВыполнитьЗагрузку(ИмяВременногоФайла);
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------



",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",7443ffa4-57c1-49e0-8cf5-8ae14c750159}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,1,
{8,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Команда1",
{1,0},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"Команда1",3,0,0,
{0,0},1,0,1,0,0}
},
{0,0},
{0,0},0,0}