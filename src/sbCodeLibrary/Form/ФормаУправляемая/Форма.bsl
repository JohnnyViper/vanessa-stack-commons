
&НаКлиенте
Перем Ванесса;

&НаКлиенте
Перем КонтекстСохраняемый;

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура Команда1(Команда)
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Функция ПолучитьПутьКФайлОтносительноКаталогоFeatures(ИмяФайлаСРасширением)
	ПутьКФайлу = "";
	
	СостояниеVanessaBehavior = Ванесса.ПолучитьСостояниеVanessaBehavior();
	
	ПутьКТекущемуFeatureФайлу = СостояниеVanessaBehavior.ТекущаяФича.ПолныйПуть;
	
	ПутьКФайлу = Лев(ПутьКТекущемуFeatureФайлу, СтрНайти(ПутьКТекущемуFeatureФайлу, "features") - 1) + ИмяФайлаСРасширением;
	
	Возврат ПутьКФайлу;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура КонфигурацияЗапущенаВРежимеТестирования() Экспорт
	ПутьКОтчету = ПолучитьПутьКФайлОтносительноКаталогоFeatures("ОтчетОСправочнике1.erf");
	Если ПустаяСтрока(ПутьКОтчету) Тогда
		ВызватьИсключение "Не удалось определить путь к отчету";		
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	Если Не Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий("/out""" + ИмяВременногоФайла + """ /Execute " + ПутьКОтчету + "") Тогда
		ВызватьИсключение "Не смог подключить TestClient!";
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "/out""" + ИмяВременногоФайла + """ /Execute " + ПутьКОтчету + "";
	Сообщение.Сообщить();	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалосьПодключитьсяККонфигурацииЗапущенойВРежимеТестирования() Экспорт
	ТестКлиент = Новый ТестируемоеПриложение();
	
	ВремяОкончанияОжидания = ТекущаяДата() + 60;
	Подключен = Ложь;
	ОписаниеОшибкиСоединения = "";
	
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			ТестКлиент.УстановитьСоединение();
			Подключен = Истина;
			
			КонтекстСохраняемый.Вставить("ТестКлиент", ТестКлиент);
			
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Если Не Подключен Тогда
		ТестКлиент = Неопределено;
		
		ВызватьИсключение ОписаниеОшибкиСоединения;
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура УдалитьВсеЭлементыСправочика()
	Выборка = Справочники.Справочник1.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ЭлементОбъект.Удалить();
		
	КонецЦикла;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура КоличествоЭлементовСправочникаВИфобазеРавно(ПроверяемоеКоличество, Комментарий = "")
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник1.Ссылка
	|ИЗ
	|	Справочник.Справочник1 КАК Справочник1";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		КоличествоЭлементов = 0;
		
	Иначе
		КоличествоЭлементов = РезультатЗапроса.Выбрать().Количество();
		
	КонецЕсли;
	
	Если Не КоличествоЭлементов = ПроверяемоеКоличество Тогда
		ВызватьИсключение Комментарий;		
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура ПроверитьНаличиеОбъектаКофигурации(ВидОбъекта, ИмяСправочника) 
	Если Метаданные[ВидОбъекта].Найти(ИмяСправочника) = Неопределено Тогда
		ВызватьИсключение "в конфигурации нет такого справочника";	
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ВернутьВОповещенииФормуВнешнейОбработки(НачальноеИмяФайла, ЭтоОбработка, ИмяФормы, ИмяСобытия) 
	Адрес = "";
	
	ПараметрыПолученияФормы = Новый Структура;
	
	ПараметрыПолученияФормы.Вставить("ЭтоОбработка", ЭтоОбработка);
	ПараметрыПолученияФормы.Вставить("ИмяФормы", ИмяФормы);
	ПараметрыПолученияФормы.Вставить("ИмяСобытия", ИмяСобытия);
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("НачатьПомещениеФайлаЗавершение", ЭтотОбъект, ПараметрыПолученияФормы), Адрес, НачальноеИмяФайла, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПомещениеФайлаЗавершение(УдалосьПоместитьФайл, Адрес, ВыбранноеИмяФайла, ПараметрыПолученияФормы) Экспорт
	ФормаВнешнегоФайла = Неопределено;
	
	Если УдалосьПоместитьФайл Тогда
		ДанныеВнешнегоФайла = ПолучитьДанныеВнешнегоФайлаНаСервере(Адрес, ПараметрыПолученияФормы);

		ФормаВнешнегоФайла = ПолучитьФорму(ДанныеВнешнегоФайла.Вид + "." + ДанныеВнешнегоФайла.Имя + ".Форма." + ПараметрыПолученияФормы.ИмяФормы + "");
	КонецЕсли;
	
	Оповестить(ПараметрыПолученияФормы.ИмяСобытия, ФормаВнешнегоФайла);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВнешнегоФайлаНаСервере(Адрес, ПараметрыПолученияФормы)
	ДанныеВнешнегоФайла = Новый Структура("Имя, Вид");
	
	Если ПараметрыПолученияФормы.ЭтоОбработка Тогда
		ДанныеВнешнегоФайла.Имя = ВнешниеОбработки.Подключить(Адрес,, Ложь);	     
		ДанныеВнешнегоФайла.Вид = "ВнешняяОбработка";	     
		
	Иначе
		ДанныеВнешнегоФайла.Имя = ВнешниеОтчеты.Подключить(Адрес,, Ложь);	
		ДанныеВнешнегоФайла.Вид = "ВнешнийОтчет";	     
		
	КонецЕсли;
	
	Возврат ДанныеВнешнегоФайла; 
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "РезультатПодключенияФормыВнешнейОбработки" Тогда
		Если Параметр = Неопределено Тогда
			Возврат;
			
		Иначе
			ФормаВнешнейОбработки = Параметр;
			
		КонецЕсли;
		
		РезультатВызоваВнешнйФункции = ФормаВнешнейОбработки.ЭкспортнаяФункция();
		
		ФормаВнешнейОбработки.ЭкспортнаяПроцедура();
		
		
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

Функция ПолучитьИмяПеременнойИзСтроки(Знач ИсходнаяСтрока, ПроверочнаяСтрока)
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	ИтоговаяСтрока = "";
	
	Пробел = " ";
	НижнееПодчеркивание = "_";
	
	КрайнийСимвол = Истина;
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	Для Счетчик = 1 По ДлинаСтроки Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, Счетчик, 1);
		
		Если Истина
			И ТекущийСимвол = Пробел
			И Не КрайнийСимвол = НижнееПодчеркивание
			Тогда
			
			ИтоговаяСтрока = ИтоговаяСтрока + "_";
			
		Иначе
			Если Найти(ПроверочнаяСтрока, ТекущийСимвол) > 0 Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол;
				
			КонецЕсли;
		КонецЕсли;
		
		КрайнийСимвол = Прав(ИтоговаяСтрока, 1);
	КонецЦикла;
	
	ПервыйСимвол = Лев(ИтоговаяСтрока, 1);
	Если Найти("0123456789", ПервыйСимвол) > 0 Тогда
		ИтоговаяСтрока = НижнееПодчеркивание + ИтоговаяСтрока;
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
КонецФункции

Функция ПолучитьПроверочнуюСтроку()
	КириллицаЗаглавные = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	КириллицаСтрочные = НРег(КириллицаЗаглавные);
	
	ЛатиницаЗаглавные = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	ЛатиницаСтрочные = НРег(ЛатиницаЗаглавные);
	
	Цифры = "0123456789";
	
	ПроверочнаяСтрока = 
	КириллицаЗаглавные +
	КириллицаСтрочные +
	ЛатиницаЗаглавные +
	ЛатиницаСтрочные +
	Цифры;
	
	Возврат ПроверочнаяСтрока;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------

&НаСервере
Процедура ЕстьОбъектКонфигурацииСИменем(ИмяВидаОбъект, ИмяОбъекта, ТекстОшибки)
	ИскомыйОбъект = Метаданные[ИмяВидаОбъект].Найти(ИмяОбъекта);
	Если ИскомыйОбъект = Неопределено Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------

